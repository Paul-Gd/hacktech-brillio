# -*- coding: utf-8 -*-
"""Reviews-notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q53dpibUg7Myv1Wydf6VdaNy5ijIepMz
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

train_df = pd.read_csv('./train-dataset_1_clean-2.csv')
#test_df = pd.read_csv('./test-dataset_clean.csv')

train_df.info()

# Distribution of numerical features
train_df.describe()

# Distribution of categorical features
train_df.describe(include=['O'])

# Columns
print(train_df.columns.values)

train_df.head()

train_df.tail()

# Drop id column
train_df = train_df.drop(['id'], axis=1)
#test_df = test_df.drop(['id'], axis=1)

train_df.head()

train_df['label'] = train_df['label'].map({'CG': 1, 'OR': 0}).astype(int)
#test_df['label'] = test_df['label'].map({'CG': 1, 'OR': 0}).astype(int)

train_df.head()

train_df['review'] = train_df['review'].astype(str)

train_df.info()

import re
# Function to clean labels
def clean_label(text):
    # Use regex to keep only alphabets and spaces
    return re.sub(r'[^A-Za-z\s]', '', text)

# Apply the cleaning function to each entry in the 'label' column
train_df['review'] = train_df['review'].apply(clean_label)
#test_df['review'] = test_df['review'].apply(clean_label)

# Display the cleaned DataFrame
print(train_df)

train_df.head()

first_row = train_df.iloc[0]
print(first_row['review'])

X = train_df["review"]
Y = train_df["label"]
# X_test = test_df["review"]
# y_test = test_df["label"]

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(X)
#X_test = vectorizer.fit_transform(X_test)

from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, Y, test_size=0.3, random_state=42)

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report
y_pred = model.predict(X_val)
print("Accuracy:", accuracy_score(y_val, y_pred))

def clean_review(text):
    # Use regex to keep only alphabets and spaces
    return re.sub(r'[^A-Za-z\s]', '', text)

def predict_review(review):
    # Clean the review
    cleaned_review = clean_review(review)
    # Transform the review to the vector space
    review_vectorized = vectorizer.transform([cleaned_review])
    # Make prediction
    prediction = model.predict(review_vectorized)
    return prediction[0]

new_review = "I loved the service and the staff was very friendly!"
predicted_label = predict_review(new_review)

predicted_label

import joblib  # You can also use import pickle

# Save the model
joblib.dump(model, 'naive_bayes_model.joblib')

# Save the vectorizer
joblib.dump(vectorizer, 'count_vectorizer.joblib')

print("Model and vectorizer saved successfully!")

